require "yaml"
vagrant_root = File.dirname(File.expand_path(__FILE__))
settings = YAML.load_file "#{vagrant_root}/settings.yaml"

IP_SECTIONS = settings["network"]["control_ip"].match(/^([0-9.]+\.)([^.]+)$/)
# First 3 octets including the trailing dot:
IP_NW = IP_SECTIONS.captures[0]
# Last octet excluding all dots:
IP_START = Integer(IP_SECTIONS.captures[1])
NUM_WORKER_NODES = settings["nodes"]["workers"]["count"]


Vagrant.configure("2") do |config|
  config.vm.provision "shell", env: { "IP_NW" => IP_NW, "IP_START" => IP_START, "NUM_WORKER_NODES" => NUM_WORKER_NODES }, inline: <<-SHELL
  apt-get update -y
  echo "$IP_NW$((IP_START)) controlplane" >> /etc/hosts
  for i in `seq 1 ${NUM_WORKER_NODES}`; do
    echo "$IP_NW$((IP_START+i)) node0${i}" >> /etc/hosts
  done
  SHELL

  if `uname -m`.strip == "aarch64"
  config.vm.box = settings["software"]["box"] + "-arm64"
  else
  config.vm.box = settings["software"]["box"]
  end
  config.vm.box_check_update = true

  config.ssh.private_key_path = "./keys/id_ed25519"
  config.ssh.forward_agent = true
  config.ssh.username = 'vagrant'
  config.ssh.password = 'vagrant'
  if Vagrant.has_plugin?("vagrant-vbguest")
  config.vbguest.auto_update = false
  end
  config.vm.define "project" do |project|
    project.vm.hostname = "project"
    project.vm.network "private_network", ip: settings["project"]["guest_ip"]
    project.vm.network "forwarded_port", host_ip: settings["project"]["host_ip"], host: settings["project"]["host_port"], guest_ip: settings["project"]["guest_ip"] , guest: settings["project"]["ssh_port"]
    project.vm.network "public_network" , bridge: settings["project"]["bridge_nic"]
    if settings["shared_folders"]
      settings["shared_folders"].each do |shared_folder|
        project.vm.synced_folder shared_folder["host_path"], shared_folder["vm_path"]
      end
    end
    project.vm.provider "virtualbox" do |vb|
        vb.cpus = settings["nodes"]["control"]["cpu"]
        vb.memory = settings["nodes"]["control"]["memory"]
        if settings["cluster_name"] and settings["cluster_name"] != ""
          vb.customize ["modifyvm", :id, "--groups", ("/" + settings["cluster_name"])]
        end
    end
    project.vm.provision "shell",
    env: {
      "DNS_SERVERS" => settings["network"]["dns_servers"].join(" "),
      "PUB_IN" => settings["project"]["pub_in"],
      "PRIV_OUT" => settings["project"]["priv_out"]
    },
    path: "scripts/def_common.sh"
  end
end

